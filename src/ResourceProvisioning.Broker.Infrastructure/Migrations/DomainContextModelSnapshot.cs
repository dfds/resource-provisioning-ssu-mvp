// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResourceProvisioning.Broker.Infrastructure.EntityFramework;

namespace ResourceProvisioning.Broker.Infrastructure.Migrations
{
    [DbContext(typeof(DomainContext))]
    partial class DomainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("ResourceProvisioning.Abstractions.Grid.GridActorStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GridActorStatus");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentResourceReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EnvironmentRootId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Provisioned")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentRootId");

                    b.ToTable("EnvironmentResourceReference");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Environment");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Resource.ResourceRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.ValueObjects.DesiredState", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiVersion")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EnvironmentRootId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResourceRootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("EnvironmentRootId")
                        .IsUnique();

                    b.HasIndex("ResourceRootId")
                        .IsUnique();

                    b.ToTable("State");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentStatus", b =>
                {
                    b.HasBaseType("ResourceProvisioning.Abstractions.Grid.GridActorStatus");

                    b.HasDiscriminator().HasValue("EnvironmentStatus");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Resource.ResourceStatus", b =>
                {
                    b.HasBaseType("ResourceProvisioning.Abstractions.Grid.GridActorStatus");

                    b.HasDiscriminator().HasValue("ResourceStatus");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentResourceReference", b =>
                {
                    b.HasOne("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentRoot", null)
                        .WithMany("Resources")
                        .HasForeignKey("EnvironmentRootId");
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentRoot", b =>
                {
                    b.HasOne("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.Aggregates.Resource.ResourceRoot", b =>
                {
                    b.HasOne("ResourceProvisioning.Broker.Domain.Aggregates.Resource.ResourceStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceProvisioning.Broker.Domain.ValueObjects.DesiredState", b =>
                {
                    b.HasOne("ResourceProvisioning.Broker.Domain.Aggregates.Environment.EnvironmentRoot", null)
                        .WithOne("DesiredState")
                        .HasForeignKey("ResourceProvisioning.Broker.Domain.ValueObjects.DesiredState", "EnvironmentRootId");

                    b.HasOne("ResourceProvisioning.Broker.Domain.Aggregates.Resource.ResourceRoot", null)
                        .WithOne("DesiredState")
                        .HasForeignKey("ResourceProvisioning.Broker.Domain.ValueObjects.DesiredState", "ResourceRootId");

                    b.OwnsMany("ResourceProvisioning.Broker.Domain.ValueObjects.Label", "Labels", b1 =>
                        {
                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DesiredStateName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .HasColumnType("TEXT");

                            b1.HasKey("Name");

                            b1.HasIndex("DesiredStateName");

                            b1.ToTable("Label");

                            b1.WithOwner()
                                .HasForeignKey("DesiredStateName");
                        });

                    b.OwnsMany("ResourceProvisioning.Broker.Domain.ValueObjects.Property", "Properties", b1 =>
                        {
                            b1.Property<string>("Key")
                                .HasColumnType("TEXT");

                            b1.Property<string>("DesiredStateName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .HasColumnType("TEXT");

                            b1.HasKey("Key");

                            b1.HasIndex("DesiredStateName");

                            b1.ToTable("Property");

                            b1.WithOwner()
                                .HasForeignKey("DesiredStateName");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
